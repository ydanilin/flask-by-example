# we need python 3.6.7 to be supported by Heroku
conda remove --all --name tflask 
conda create --name tflask python=3.6.7

conda install flask psycopg2 Flask-SQLAlchemy requests beautifulsoup4 nltk redis
pip install gunicorn Flask-Migrate Flask-Script rq

pip freeze > requirements.txt


"C:\Program Files\heroku\bin\heroku.cmd"

"C:\Program Files\heroku\bin\heroku.cmd" create wordcount-dan-pro
Creating ⬢ wordcount-dan-pro... done
https://wordcount-dan-pro.herokuapp.com/ | https://git.heroku.com/wordcount-dan-pro.git

"C:\Program Files\heroku\bin\heroku.cmd" create wordcount-dan-stage
Creating ⬢ wordcount-dan-stage... done
https://wordcount-dan-stage.herokuapp.com/ | https://git.heroku.com/wordcount-dan-stage.git

# !!! Here it is different from the tutorial! We need to add remotes based on http!
git remote add pro git@heroku.com:wordcount-dan-pro.git
git remote add stage git@heroku.com:wordcount-dan-stage.git
git remote remove heroku
git remote remove pro
git remote remove stage
# Actually needed:
git remote add pro https://git.heroku.com/wordcount-dan-pro.git
git remote add stage https://git.heroku.com/wordcount-dan-stage.git

git push stage master
git push pro master


set ENV variables on Windows:
At this point, only manually:
set APP_SETTINGS=config.DevelopmentConfig
set DATABASE_URL=postgresql://postgres:hatikwah@localhost/wordcount_dev


# ENV variables to Heroku:
"C:\Program Files\heroku\bin\heroku.cmd" config:set APP_SETTINGS=config.StagingConfig --remote stage
"C:\Program Files\heroku\bin\heroku.cmd" config:set APP_SETTINGS=config.ProductionConfig --remote pro

# run Python on Heroku:
"C:\Program Files\heroku\bin\heroku.cmd" run python app.py --app wordcount-dan-stage
"C:\Program Files\heroku\bin\heroku.cmd" run python app.py --app wordcount-dan-pro


On windows installed version 10.6
database superuser password: hatikwah
port 5432
locale: use default
!! This is important otherwise installation fail.

Run:
"C:\Program Files\PostgreSQL\10\bin\psql.exe" -U postgres
it prompts for password

create database wordcount_dev;

"C:\tp\docs\G\Pitonizm\redisdemo\distrib\redis-server.exe"
"C:\tp\docs\G\Pitonizm\redisdemo\distrib\redis-cli.exe"

python manage.py runserver

If make fresh install Conda on Windows without PATHS, add the following to path:
C:\tp\Miniconda3\;C:\tp\Miniconda3\Scripts;C:\tp\Miniconda3\Library;C:\tp\Miniconda3\Library\bin

Run Babun:
C:\Users\danilin\.babun\cygwin\bin\mintty.exe -
Go to dir in Babun:
/C/tp/docs/G/Pitonizm/tutorials/flask-by-example
or "open Babun here"
pact install python3
Close shell and then run update.bat inside the babun folder
pact install libpq-devel
pact install python3-devel
Next, do python3 -m ensurepip
python3 -m pip install redis rq requests beautifulsoup4 nltk flask Flask-SQLAlchemy psycopg2
python3 -m pip install --upgrade pip

SCAN 0
TYPE <key>
HGETALL <key of type hash>
DEL <key>

Nginx operations:
sudo systemctl stop/start/restart/reload nginx
enable/disable at boot:
sudo systemctl disable/enable nginx
did:
https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)

Remove conda:
rm -rf ~/Miniconda3
remove .bashrc and rename .bashrc-miniconda3.bak back to .bashrc
rm -rf .conda (and ~/.condarc ~/.continuum if any)

Install uwsgi
(not needed) sudo apt-get install gcc
conda install -c conda-forge uwsgi

----------------------------------
simples config, direct access:
[uwsgi]                  
module = wsgi:application
                         
master = true            
processes = 5            
                         
protocol = http          
socket = 0.0.0.0:8080    
----------------------------------

sudo usermod -G www-data -a dan
